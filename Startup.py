import Helpers
import Diagnostic_Parameters

import os
import json
from datetime import date
import tkinter as tk


class StartupMenu(tk.Frame):
    """
    Asks user for info needed to create shotrundir
    Instantiated in Sidebar_Dialog
    """

    def __init__(self, master, **options):
        self.master = master
        tk.Frame.__init__(self, master, **options)

        # Shot Run Directory
        txt = "Enter shot run directory name"
        self.lbl_run_name = tk.Label(self, text=txt)

        self.entry_run_name = tk.Entry(self, width=30)
        self.entry_run_name.insert(0, "Shot_Run")

        # Date
        txt = "Enter date"
        self.lbl_date = tk.Label(self, text=txt)

        self.frame_date_entries = tk.Frame(self)
        today = date.today()

        self.entry_year = tk.Entry(self.frame_date_entries, width=15)
        self.entry_year.insert(0, today.strftime("%Y"))
        self.entry_year.grid(row=0, column=0)

        self.entry_month = tk.Entry(self.frame_date_entries, width=7)
        self.entry_month.insert(0, today.strftime("%m"))
        self.entry_month.grid(row=0, column=1)

        self.entry_day = tk.Entry(self.frame_date_entries, width=7)
        self.entry_day.insert(0, today.strftime("%d"))
        self.entry_day.grid(row=0, column=2)

        # Run number
        txt = "Enter run number"
        self.lbl_run_num = tk.Label(self, text=txt)
        self.entry_run_num = tk.Entry(self, width=30)
        self.entry_run_num.insert(0, "0")

        # "Generate Shot Run Directory?" button
        self.fr_generate = tk.Frame(self)
        lbl_text = "Generate Shot Run Directory?"
        self.lbl_generate = tk.Label(self.fr_generate, text=lbl_text)
        self.lbl_generate.grid(row=0, column=0)
        self.btn_generate = tk.Button(self.fr_generate, text="Ok",
                                      command=lambda: self.generate())
        self.btn_generate.grid(row=0, column=1)

        # "Use last" button
        self.fr_use_last = tk.Frame(self)
        lbl_text = "Use Last Shot Run Directory?"
        self.lbl_use_last = tk.Label(self.fr_use_last, text=lbl_text)
        self.lbl_use_last.grid(row=0, column=0)
        self.btn_use_last = tk.Button(self.fr_use_last, text="Ok",
                                      command=lambda: self.use_last())
        self.btn_use_last.grid(row=0, column=1)

        # Gridding
        self.entry_run_name.grid(row=0, column=0)
        self.frame_date_entries.grid(row=1, column=0)
        self.entry_run_num.grid(row=2, column=0)
        self.fr_generate.grid(row=3, column=0)
        self.fr_use_last.grid(row=4, column=0)

    def get_data(self):
        date = {
            "year": self.entry_year.get(),
            "month": self.entry_month.get(),
            "day": self.entry_day.get()
        }
        return {
            "run_name": self.entry_run_name.get(),
            "date": date,
            "run_num": self.entry_run_num.get()
        }

    def generate(self):
        '''
        Handles 'ok' button for "Generate?":
        -Checks if shotrundir already exists
        -Loads new UI if necessary
        -Updates shotrundir if necessary
        -Removes UI
        '''

        # Checks if shotrundir already exists
        menu_data = self.get_data()
        date = menu_data["date"]
        base_shotrundir = Helpers.get_from_file("base_shotrundir", "dimensions.json")
        shotrundir = menu_data["run_name"] + "_"
        shotrundir += date["year"] + date["month"] + date["day"] + "_"
        shotrundir = os.path.join(base_shotrundir, shotrundir)
        while os.path.isdir(shotrundir + menu_data["run_num"]):
            menu_data["run_num"] = str(1 + int(menu_data["run_num"]))
        shotrundir += menu_data["run_num"]
        os.mkdir(shotrundir)
        Helpers.edit_file("shotrundir", shotrundir, "setup.json")
        self.destroy()

    def use_last(self):
        '''
        Handles "Ok" button for "use last?":
        -Sets shot run directory to current value in setup.json
        -Removes UI
        '''
        shotrundir = Helpers.get_from_file("shotrundir_last", "setup.json")
        Helpers.edit_file("shotrundir", shotrundir, "setup.json")
        self.destroy()


def startup(app):
    """
    Handles first-thing events:
    - Checks if each default directory exists
    - Stores shot_run_name in setup.json
    """

    ''' Checks if each default directory exists '''
    ''' Directories with files; cannot be generated by code '''
    paths = ["./Workspaces",
             "./assets",
             "./assets/Example_Diagnostic"
             ]
    for path in paths:
        if not os.path.isdir(path):
            error_text = 'Required path "' + path + '" does not exist'
            error_text += "\n Check that expected files exist"
            Helpers.ErrorWindow(error_text)
            app.close()
            # NOTE: This will only check if the path exists, not if the
            # data inside them is valid
    ''' Directories without files; can be generated by code '''
    paths = ["./Shot_Runs",
             "./Shot_Runs/Shot_Run_Default",
             "./Workspaces",
             "./Screenshots"
             ]
    for path in paths:
        if not (os.path.isdir(path)):
            os.mkdir(path)

    ''' Stores shot_run_name in setup.json '''
    filename = Helpers.default_filename
    shotrundir_last = Helpers.get_from_file("shotrundir", filename)
    base_shotrundir_last = Helpers.get_from_file("base_shotrundir", filename)
    data = {
        "shotrundir": "./Shot_Runs/Shot_Run_Default",
        "shotrundir_last": shotrundir_last,
        "base_shotrundir": filename,
        "date": Helpers.date_default,
        "shot_num": "0"
    }
    with open(filename, "w") as write_file:
        json.dump(data, write_file)

    ''' Creates default diagnostic data '''
    default_diagnostic = Diagnostic_Parameters.DEFAULT_DIAGNOSTIC
    diagnostic_data = []
    for _ in range(Diagnostic_Parameters.ROWS * Diagnostic_Parameters.COLS):
        diagnostic_data.append(default_diagnostic)
    diagnostic_out = {"diagnostics": diagnostic_data}
    with open("diagnostic_data.json", "w") as write_file:
        json.dump(diagnostic_out, write_file)
